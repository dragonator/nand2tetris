#!/usr/bin/env python
import re
import sys

comment_regex = r'//.*'
label_regex   = r'\((?P<label_name>[A-Za-z0-9_.$]+)\)'
A_instruction_regex = r'@(?P<symbol_name>[a-zA-Z0-9_.$]+)'
C_instruction_regex = (
        r'(?P<dest>([ADM]{1,3})(?==)|)=?'
        r'(?P<comp>0|1|-1|![DA]|-[DA]|[DA]\+1|[DA]\-1|D[+-]A|A[+-]D|D[&|]A|'
        r'(?P<a>M[+-][1D]|D[+-]M|D[&|]M|[-!]?M)|D|A)'
        r';?(?P<jump>(?<=;)(J([GL]T|[GLN]E|EQ|MP))|)'
        )

comp_table = {
        '0'  : '101010' ,
        '1'  : '111111' ,
        '-1' : '111010' ,
        'D'  : '001100' ,
        'A'  : '110000' ,
        'M'  : '110000' ,
        '!D' : '001101' ,
        '!A' : '110001' ,
        '!M' : '110001' ,
        '-D' : '001111' ,
        '-A' : '110011' ,
        '-M' : '110011' ,
        'D+1': '011111' ,
        'A+1': '110111' ,
        'M+1': '110111' ,
        'D-1': '001110' ,
        'A-1': '110010' ,
        'M-1': '110010' ,
        'D+A': '000010' ,
        'A+D': '000010' ,
        'D+M': '000010' ,
        'M+D': '000010' ,
        'D-A': '010011' ,
        'D-M': '010011' ,
        'A-D': '000111' ,
        'M-D': '000111' ,
        'D&A': '000000' ,
        'A&D': '000000' ,
        'D&M': '000000' ,
        'M&D': '000000' ,
        'D|A': '010101' ,
        'A|D': '010101' ,
        'D|M': '010101' ,
        'M|D': '010101' ,
        }

jump_table = {
        ''   : '000' ,
        'JGT': '001' ,
        'JEQ': '010' ,
        'JGE': '011' ,
        'JLT': '100' ,
        'JNE': '101' ,
        'JLE': '110' ,
        'JMP': '111' ,
        }


symbol_table_init = {
    'R0': 0 ,
    'R1': 1 ,
    'R2': 2 ,
    'R3': 3 ,
    'R4': 4 ,
    'R5': 5 ,
    'R6': 6 ,
    'R7': 7 ,
    'R8': 8 ,
    'R9': 9 ,
    'R10': 10 ,
    'R11': 11 ,
    'R12': 12 ,
    'R13': 13 ,
    'R14': 14 ,
    'R15': 15 ,
    'SCREEN': 16384 ,
    'KBD': 24576 ,
    'SP': 0 ,
    'LCL': 1 ,
    'ARG': 2 ,
    'THIS': 3 ,
    'THAT': 4,
        }

def parse_source_code(filename):
    with open(filename, 'r') as source_obj:
        source_code = source_obj.read()

    source_code = re.sub(comment_regex, '',source_code)
    source_code = re.split(r'\s*\n\s*' ,source_code)

    return [line for line in source_code if line]

def process_labels(source_code, symbol_table):
    labels_count = 0
    left_source_code = []
    #import pdb;pdb.set_trace()
    for index, line in enumerate(source_code):
        match = re.match(label_regex, line)
        if match is not None:
            symbol_table[match.group('label_name')] = index - labels_count
            labels_count += 1
        else:
            left_source_code.append(line)

    return left_source_code

def process_instructions(source_code, symbol_table):
    global next_variable_address_generator
    machine_code = []
    for line in source_code:
        if line.startswith('@'):
            result = process_A_instruction(line)
        else:
            result = process_C_instruction(line)

        machine_code.append(result)


    #print('\n'.join(machine_code))

    return machine_code

def process_A_instruction(instruction):
    result = ''
    A_instruction_match = re.match(A_instruction_regex, instruction)
    if A_instruction_match is not None:
        symbol_name = A_instruction_match.group('symbol_name')
        try:
            int(symbol_name)
        except:
            if symbol_name not in symbol_table.keys():
                symbol_table[symbol_name] = next_variable_address_generator.next()
            instruction = instruction.replace(symbol_name, str(symbol_table[symbol_name]))

        address = int(instruction[1:])
        if address > 32767:
            raise Exception('Invalid address for A-instruction.\nThe value can\'t fit in 15 bits.\n')

        return "{0:016b}".format(address)
    else:
        raise Exception('This is not an A-instruction: {}'.format(instruction))

def process_C_instruction(instruction):
    result = ''
    #if 'M=D+1' in instruction:
    #    import pdb;pdb.set_trace()
    C_instruction_match = re.match(C_instruction_regex, instruction)
    if C_instruction_match is not None:
        dest = C_instruction_match.group('dest')
        comp = C_instruction_match.group('comp')
        jump = C_instruction_match.group('jump')
        a = C_instruction_match.group('a')
        if a:
            a = '1'
        else:
            a = '0'

        comp_bytes = comp_table[comp]
        dest_A = '1' if 'A' in dest else '0'
        dest_D = '1' if 'D' in dest else '0'
        dest_M = '1' if 'M' in dest else '0'
        jump_bytes = jump_table[jump]
        result = ''.join(['111', a, comp_bytes, dest_A, dest_D, dest_M, jump_bytes])

        return result
    else:
        raise Exception('This is not a C-instruction: {}'.format(instruction))

def next_variable_address():
    next_address = 16
    for i in range(0, 16368):
        yield next_address
        next_address += 1


if __name__ == '__main__':
    files_to_translate = sys.argv[1:]
    for source_file in files_to_translate:
        print('Assembling {}'.format(source_file))
        symbol_table = symbol_table_init
        source_code = parse_source_code(source_file)
        source_code = process_labels(source_code, symbol_table)
        next_variable_address_generator = next_variable_address()
        translated_code = process_instructions(source_code, symbol_table)
        source_file_no_ext = source_file.rsplit('.')[0]
        hack_filename = ''.join([source_file_no_ext, '.hack'])
        with open(hack_filename, 'w') as hack_obj:
            hack_obj.write('\n'.join(translated_code))

