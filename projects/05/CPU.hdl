// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instruction input
    //  instructionOutput[5]: destination bit for A
    //  instructionOutput[15]:
    //      - 0 for A instruction
    //      - 1 for C instruction
    Mux16(a=instruction ,b=ALUOutput ,sel=instruction[15] ,
          out=addressMuxOutput);

    // A register handlding
    //  instructionOutput[5]: destination bit for A
    //  instructionOutput[15]:
    //      - 0 for A instruction
    //      - 1 for C instruction
    And(a=instruction[5] ,b=instruction[15] ,out=CInstrictionAndWriteA);
    Not(in=instruction[15] ,out=isAInstruction);
    Or(a=CInstrictionAndWriteA ,b=isAInstruction ,out=writeA);
    ARegister(in=addressMuxOutput ,load=writeA ,
              out=ARegisterOutput ,out[0..14]=addressM);

    // M value handling
    Mux16(a=ARegisterOutput ,b=inM ,sel=instruction[12] ,out=MValue);
    // writeM
    //  instruction[3]: destination bit for M
    And(a=instruction[3] ,b=instruction[15], out=writeM);

    // D register handling
    //  instruction[4]= destination bit for D
    //  instructionOutput[15]:
    //      - 0 for A instruction
    //      - 1 for C instruction
    And(a=instruction[4] ,b=instruction[15] ,out=CInstructionAndWriteD);
    DRegister(in=ALUOutput ,load=CInstructionAndWriteD ,out=DRegisterOutput);

    // ALU
    //  instructionOutput[6..11] : computation bits
    ALU(x=DRegisterOutput ,y=MValue ,
        zx=instruction[11] ,
        nx=instruction[10] ,
        zy=instruction[9] ,
        ny=instruction[8] ,
        f=instruction[7] ,
        no=instruction[6] ,
        out=ALUOutput, 
        out=outM ,
        zr=zeroALUOutput ,
        ng=negativeALUOutput);
    
    // PC handling
    //  instruction[0..2]= jump bits
    DMux8Way(in=true ,sel=instruction[0..2] ,
             a=next ,
             b=JGT ,
             c=JEQ ,
             d=JGE ,
             e=JLT ,
             f=JNE ,
             g=JLE ,
             h=JMP);

    // Jump if greater than zero
    And(a=notNegativeALUOutput ,b=notZeroALUOutput ,out=JGTcondition);
    And(a=JGTcondition ,b=JGT ,out=JGTresult);

    // Jump if equals zero
    And(a=zeroALUOutput ,b=JEQ ,out=JEQresult);

    // Jump if greater or equal to zero
    Not(in=negativeALUOutput ,out=notNegativeALUOutput, out=JGEcondition);
    And(a=JGEcondition ,b=JGE ,out=JGEresult);

    // Jump if less than zero
    And(a=negativeALUOutput ,b=JLT ,out=JLTresult);

    // Jump if not equals zero
    Not(in=zeroALUOutput ,out=notZeroALUOutput ,out=JNEcondition);
    And(a=JNEcondition ,b=JNE ,out=JNEresult);

    // Jump if less or equal to zero
    Or(a=negativeALUOutput, b=zeroALUOutput, out=JLEcondition);
    And(a=JLEcondition ,b=JLE ,out=JLEresult);

    // Combine conditions results
    Or8Way(in[0]=false ,
           in[1]=JGTresult ,
           in[2]=JEQresult ,
           in[3]=JGEresult ,
           in[4]=JLTresult ,
           in[5]=JNEresult ,
           in[6]=JLEresult ,
           in[7]=JMP ,
           out=jumpConditionsResult);

    // Jump if C-instruction and the conditions are true
    And(a=jumpConditionsResult ,b=instruction[15] ,out=jump);
    PC(in=ARegisterOutput ,load=jump ,inc=true ,reset=reset ,out[0..14]=pc);
}
